import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Blink } from "../target/types/blink";
import { PublicKey, Keypair } from "@solana/web3.js";
import {
  getAuthAddress,
  getConfigAddress,
  getBlinkAddress,
  getSubmitAddress,
  getSplTokenAddress,
  getKeypair,
} from "./utils";
import { BN } from "@coral-xyz/anchor";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";

describe("blink start", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.Blink as Program<Blink>;
  const provider = program.provider as anchor.AnchorProvider;
  const payer = provider.wallet as anchor.Wallet;

  const index = 3010;
  const answer = 3;
  const amount = new BN(10 ** 9);
  const tokenMint = new PublicKey(
    "W8LRujy76DASXHev9VUWdbAUyBZnXmS5MXHKNScPmwW"
  );

  let creator, user: Keypair;
  let auth, config, blink, submit, vault, creatorToken, userToken: PublicKey;

  const confirm = async (signature: string): Promise<string> => {
    const block = await provider.connection.getLatestBlockhash();
    await provider.connection.confirmTransaction({
      signature,
      ...block,
    });
    return signature;
  };

  beforeEach(() => {
    let _;
    [auth, _] = getAuthAddress(program.programId);
    [config, _] = getConfigAddress(index, program.programId);
    [blink, _] = getBlinkAddress(index, program.programId);
    vault = getSplTokenAddress(tokenMint, auth, TOKEN_PROGRAM_ID);

    creator = getKeypair("./creator.json");
    user = getKeypair("./user.json");

    creatorToken = getSplTokenAddress(
      tokenMint,
      creator.publicKey,
      TOKEN_PROGRAM_ID
    );
    userToken = getSplTokenAddress(tokenMint, user.publicKey, TOKEN_PROGRAM_ID);
    [submit, _] = getSubmitAddress(index, user.publicKey, program.programId);
    /*
    console.log(`TOKEN_PROGRAM      : ${TOKEN_PROGRAM_ID}`);
    console.log(`program.programId  : ${program.programId}`);
    console.log(`Creator Address    : ${creator.publicKey}`);
    console.log(`CreatorToken       : ${creatorToken}`);
    console.log(``);
    console.log(`Payer Address      : ${payer.publicKey}`);
    console.log(`Program Address    : ${program.programId}`);
    console.log(`Auth Address       : ${auth}`);
    console.log(`Blink Address      : ${blink}`);
    console.log(`Submit Address     : ${submit}`);
    console.log(`CreatorToken       : ${creatorToken}`);
    console.log(`Vault Address      : ${vault}`);
    console.log(`Config Address   ->: ${config}`);
    */
  });
  it("init Test", async () => {
    try {
      await program.methods
        .initialize(index, amount, "pic", "content", "op1", "op2", "op3", "op4")
        .accounts({
          creator: creator.publicKey,
          authority: auth,
          blinkConfig: config,
          blinkState: blink,
          tokenMint: tokenMint,
          creatorToken: creatorToken,
          vault: vault,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([creator])
        .rpc()
        .then(confirm);
    } catch (error) {
      console.log("\nError index======");
      console.log(error);
    }
  });
  it("initialize func", async () => {
    await program.methods
      .initialize(index, amount, "pic", "content", "op1", "op2", "op3", "op4")
      .accounts({
        creator: creator.publicKey,
        authority: auth,
        blinkConfig: config,
        blinkState: blink,
        tokenMint: tokenMint,
        creatorToken: creatorToken,
        vault: vault,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([creator])
      .rpc();
  });
  it("submit func", async () => {
    await program.methods
      .submit(index, answer)
      .accounts({
        user: user.publicKey,
        submitState: submit,
        blinkState: blink,
      })
      .signers([user])
      .rpc();
  });
  it("close func", async () => {
    await program.methods
      .close(index, answer)
      .accounts({
        owner: creator.publicKey,
        blinkState: blink,
      })
      .signers([creator])
      .rpc();
  });
  it("claim func", async () => {
    const amount = new BN(10 ** 9);

    await program.methods
      .claim(index)
      .accounts({
        user: user.publicKey,
        submitState: submit,
        blink_state: blink,
        authority: auth,
        user_account: userToken,
        vault: vault,
        tokenMint: tokenMint,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([user])
      .rpc();
  });

  it("submit Test", async () => {
    try {
      const tx = await program.methods
        .submit(index, answer)
        .accounts({
          user: user.publicKey,
          submitState: submit,
          blinkState: blink,
        })
        .signers([user])
        .rpc()
        .then(confirm);
    } catch (error) {
      console.log("\nError index");
      //console.log(error);
      console.log(error.msg);
    }
  });

  /*
  
  it("Read the new account's data", async () => {
    //const blinkInfo = await program.account.blinkState.fetch(values.blinkState);
    //console.log(`reward     : ${blinkInfo.reward}`);
  });*/
});
